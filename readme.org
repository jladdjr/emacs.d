* Introduction

* Bootstrap Package Manager

Using [[https://github.com/jwiegley/use-package#getting-started][straight.el]] and use-package.

See [[https://jeffkreeftmeijer.com/emacs-straight-use-package/][this article]] for benefits of using straight.el.

** Bootstrap straight

#+begin_src emacs-lisp
(message "bootstrapping straight.el")

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Disable package.el in favor of straight.el

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

** Install use-package

use-package allows for you to install and configure a package in one step.

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

*** Configure use-package to use straight.el by default

#+begin_src emacs-lisp
(use-package straight
    :custom (straight-use-package-by-default t))
#+end_src

Now in order to install a package, all we need to do is:

#+begin_src emacs-lisp
; (use-package evil-commentary)
#+end_src

There are options for configurang packages with straight.el, too:
- ~:init~ - code that will be run before installing the package
- ~:config~ - code that will be run right after the package is installed
- ~:bind~ - adds key bindings after a module has been installed
- ~:custom:~ - set customizable variables

See the straight.el [[https://github.com/jwiegley/use-package#getting-started][getting started guide]] for more documentation on how to load and configure packages with straight.el.

* Disable GUI elements

Disable GUI elements. Will rely on key bindings.

#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src

* Install evil

See [[https://evil.readthedocs.io/en/latest/index.html][this page]] for information on how to get started with evil mode.

#+begin_src emacs-lisp
(use-package evil
    :config (evil-mode))
#+end_src

* Install magit

We can't go anywhere without [[https://magit.vc/][Magit]]!

#+begin_src emacs-lisp
(use-package magit)
#+end_src

* Install helm

[[https://emacs-helm.github.io/helm/][Helm]] is invaluable when it comes to incremental completion and narrowing.

After installing Helm, remap selected commands to use the corresponding helm function.

#+begin_src emacs-lisp
(use-package helm
    :config (progn
             (define-key (current-global-map) [remap list-buffers] 'helm-buffers-list)
             (define-key (current-global-map) [remap bookmark-jump] 'helm-filtered-bookmarks)))
#+end_src

* Install company

[[https://company-mode.github.io/][company-mode]] offers very helpful auto-completion.

#+begin_src emacs-lisp

(use-package company
    :config (add-hook 'after-init-hook 'global-company-mode))

#+end_src

* Install Base16 Theme

Use base16-eighties from the [[https://github.com/tinted-theming/base16-emacs][base16-theme]] package.

#+begin_src emacs-lisp
(use-package base16-theme
    :config (load-theme 'base16-eighties t))
#+end_src

* Global Keybindings

On a Dvorak keyboard, ~C-x~ is a stretch. Literally.
Globally replace ~C-x~ with ~C-t~ (and vice-versa).

#+begin_src emacs-lisp
(keyboard-translate ?\C-t ?\C-x)
(keyboard-translate ?\C-x ?\C-t)
#+end_src

~Alt-m~ is frequently used, but not as convenient to enter as a Control command.
Globally replace ~Alt-m~ with ~C-m~.

#+begin_src emacs-lisp
(keyboard-translate ?\C-m ?\M-x)
#+end_src
