* Introduction

* Bootstrap Package Manager

Using [[https://github.com/jwiegley/use-package#getting-started][straight.el]] and use-package.

See [[https://jeffkreeftmeijer.com/emacs-straight-use-package/][this article]] for benefits of using straight.el.

** Bootstrap straight

#+begin_src emacs-lisp
(message "bootstrapping straight.el")

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Disable package.el in favor of straight.el

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

** Install use-package

use-package allows for you to install and configure a package in one step.

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

*** Configure use-package to use straight.el by default

#+begin_src emacs-lisp
(use-package straight
    :custom (straight-use-package-by-default t))
#+end_src

Now in order to install a package, all we need to do is:

#+begin_src emacs-lisp
; (use-package evil-commentary)
#+end_src

There are options for configuring packages with straight.el, too:
- ~:init~ - code that will be run before installing the package
- ~:config~ - code that will be run right after the package is installed
- ~:bind~ - adds key bindings after a module has been installed
- ~:custom:~ - set customizable variables

See the straight.el [[https://github.com/jwiegley/use-package#getting-started][getting started guide]] for more documentation on how to load and configure packages with straight.el.

* Disable GUI elements

Disable GUI elements. Will rely on key bindings.

#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src

* Disable tabs

Never, ever use [[https://www.emacswiki.org/emacs/IndentationBasics#h5o-1][tabs]].

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

* Install evil

See [[https://evil.readthedocs.io/en/latest/index.html][this page]] for information on how to get started with evil mode.

#+begin_src emacs-lisp
(use-package evil
    :config (evil-mode))
#+end_src

* Install magit

We can't go anywhere without [[https://magit.vc/][Magit]]!

Include a hook that drops the user into emacs mode when prompted for a Git commit message.

#+begin_src emacs-lisp
(use-package magit
  :config
  (add-hook 'git-commit-mode-hook 'evil-emacs-state))
#+end_src

* Install perspective

[[https://github.com/nex3/perspective-el][Perspective]] offers the ability to:
- Create (named) window layouts, refered to as perspectives
- Save perspectives to disk
- Only list buffers used by current perspective

Key Perspective commands are outlined [[https://github.com/nex3/perspective-el#usage][here]].

The Perspective prefix key is set to ~C-c~ ~C-z~ below.

#+begin_src emacs-lisp
(use-package perspective
  :custom
  (persp-mode-prefix-key (kbd "C-c C-z"))
  :init
  (persp-mode))
#+end_src

* Install projectile

[[https://projectile.mx/][Projectile]] offers several commands for interacting with files within the scope of a project.

#+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* Install helm

[[https://emacs-helm.github.io/helm/][Helm]] is invaluable when it comes to incremental completion and narrowing.

After installing Helm, remap selected commands to use the corresponding helm function.

#+begin_src emacs-lisp
(use-package helm
    :config (progn
             (define-key (current-global-map) [remap list-buffers] 'helm-buffers-list)
             (define-key (current-global-map) [remap bookmark-jump] 'helm-filtered-bookmarks)))
#+end_src

* Install helm-swoop

While it looks like an [[https://github.com/emacsorphanage/helm-swoop][orphaned project]] at this point,
[[https://www.emacswiki.org/emacs/HelmSwoop][helm-swoop]] still seems like a helpful (and, for the moment, stable) improvement on Emacs' built-in
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Isearch.html][isearch]].

#+begin_src emacs-lisp
(use-package helm-swoop)
(global-set-key "\C-s" 'helm-swoop-without-pre-input)
#+end_src

* Install company

[[https://company-mode.github.io/][company-mode]] offers very helpful auto-completion.

#+begin_src emacs-lisp

(use-package company
    :config (add-hook 'after-init-hook 'global-company-mode))

#+end_src

* Install Base16 Theme

Use base16-eighties from the [[https://github.com/tinted-theming/base16-emacs][base16-theme]] package.

#+begin_src emacs-lisp
(use-package base16-theme
    :config (load-theme 'base16-eighties t))
#+end_src

* Dvorak Tweaks

** Swap C-x and C-t

On a Dvorak keyboard, ~C-x~ is a stretch. Literally.
Globally replace ~C-x~ with ~C-t~ (and vice-versa).

#+begin_src emacs-lisp
(keyboard-translate ?\C-t ?\C-x)
(keyboard-translate ?\C-x ?\C-t)
#+end_src

** Replace M-x with C-m

~M-x~ is frequently used, but not as convenient to enter as a Control command.
Globally replace ~M-x~ with ~C-m~.

#+begin_src emacs-lisp
(keyboard-translate ?\C-m ?\M-x)
#+end_src

* Automatically Switch to Opened Window

When emacs splits the current window (horizontally or vertically)
move point to the new window.

For more thougths on this tweak -- including reasons why ~advice-add~ should not be used --
check out [[https://stackoverflow.com/questions/6464738/how-can-i-switch-focus-after-buffer-split-in-emacs][this Stackoverflow question]].

#+begin_src emacs-lisp
(global-set-key "\C-x2" (lambda () (interactive)(split-window-below) (other-window 1)))
(global-set-key "\C-x3" (lambda () (interactive)(split-window-right) (other-window 1)))
#+end_src
