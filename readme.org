* Introduction

* Bootstrap Package Manager

Using [[https://github.com/jwiegley/use-package#getting-started][straight.el]] and use-package.

See [[https://jeffkreeftmeijer.com/emacs-straight-use-package/][this article]] for benefits of using straight.el.

** Bootstrap straight

#+begin_src emacs-lisp
(message "bootstrapping straight.el")

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Disable package.el in favor of straight.el

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

** Install use-package

use-package allows for you to install and configure a package in one step.

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

*** Configure use-package to use straight.el by default

#+begin_src emacs-lisp
(use-package straight
    :custom (straight-use-package-by-default t))
#+end_src

Now in order to install a package, all we need to do is:

#+begin_src emacs-lisp
; (use-package evil-commentary)
#+end_src

There are options for configuring packages with straight.el, too:
- ~:init~ - code that will be run before installing the package
- ~:config~ - code that will be run right after the package is installed
- ~:bind~ - adds key bindings after a module has been installed
- ~:custom:~ - set customizable variables

See the straight.el [[https://github.com/jwiegley/use-package#getting-started][getting started guide]] for more documentation on how to load and configure packages with straight.el.

* Global Preferences
** Disable GUI elements

Disable GUI elements. Will rely on key bindings.

#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src

** Disable tabs

Never, ever use [[https://www.emacswiki.org/emacs/IndentationBasics#h5o-1][tabs]].

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Misc

#+begin_src emacs-lisp
(show-paren-mode 1)
(setq initial-scratch-message nil)
(setq confirm-kill-emacs 'y-or-n-p)
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
#+end_src

* Install evil

See [[https://evil.readthedocs.io/en/latest/index.html][this page]] for information on how to get started with evil mode.

In the ~config~ section, set ~evil-want-C-i-jump~ to ~nil~ since ~C-i~ is tab and we want to preserve tab's default behavior.
(If we don't set this to ~nil~, tab will invoke ~evil-jump-forward~ instead of ~org-cycle~ in org-mode, for example,
preventing us from cycling through the different folding options for a node).

For some reason, the above approach works in Debian, but not Mac OSX.
Taking things a step further, we also use ~with-eval-after-load~ to forcefully unset tab in ~evil-motion-state-map~.
(Found this approach [[https://github.com/emacs-evil/evil/issues/1604][here]].)

#+begin_src emacs-lisp
(use-package evil
  :config
  (evil-mode)
  (evil-set-initial-state 'help-mode 'emacs)
  (evil-set-initial-state 'Info-mode 'emacs)
  (evil-set-initial-state 'ivy-occur-mode 'emacs)
  (setq evil-want-C-i-jump nil)
  (with-eval-after-load 'evil-maps (define-key evil-motion-state-map (kbd "TAB") nil))
  (with-eval-after-load 'evil-maps (define-key evil-normal-state-map (kbd "C-p") 'projectile-command-map)))
#+end_src

* Install magit

We can't go anywhere without [[https://magit.vc/][Magit]]!

Include a hook that drops the user into emacs mode when prompted for a Git commit message.

#+begin_src emacs-lisp
(use-package magit
  :config
  (add-hook 'git-commit-mode-hook 'evil-emacs-state))
#+end_src

* Install yaml-mode

Install [[https://github.com/yoshiki/yaml-mode][yaml-mode]].

More information on yaml-mode is available [[https://www.emacswiki.org/emacs/YamlMode][here]].

#+begin_src emacs-lisp
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

* Install perspective

[[https://github.com/nex3/perspective-el][Perspective]] offers the ability to:
- Create (named) window layouts, refered to as perspectives
- Save perspectives to disk
- Only list buffers used by current perspective

Key Perspective commands are outlined [[https://github.com/nex3/perspective-el#usage][here]].

The Perspective prefix key is set to ~C-c~ ~C-z~ below.

#+begin_src emacs-lisp
(use-package perspective
  :custom
  (persp-mode-prefix-key (kbd "C-c C-z"))
  :init
  (persp-mode)
  :config
  (setq persp-state-default-file "~/.emacs.d/persp-"))
#+end_src

* Install projectile

[[https://projectile.mx/][Projectile]] offers several commands for interacting with files within the scope of a project.

Map ~projectile-find-file~ to ~C-f~ in the ~evil-normal-state-map~
because of how frequently this gets called.
We map this in ~evil-normal-state-map~ specifically so that ~C-f~ is not shadowed in other modes
where it is less likely to be used anyways.

#+begin_src emacs-lisp
(use-package projectile
  :init
  (setq projectile-project-search-path '("~/git/" "~/org/" "~/.emacs.d"))
  (projectile-mode)
  (with-eval-after-load 'evil-maps (define-key evil-normal-state-map (kbd "C-f") 'projectile-find-file))
  :bind
  (:map projectile-command-map
    ("s s" . (lambda () (interactive) (call-interactively 'projectile-ag) (other-window 1)))))
#+end_src

Install the ag package as well so that projectile can make ag searches.

Map ~projectile-ag~ to ~C-n~ in the ~evil-normal-state-map~
because of how frequently this gets called.
We map this in ~evil-normal-state-map~ specifically so that ~C-n~ is not shadowed in other modes
where it is less likely to be used anyways.

As a convenience, wrap ~projectile-ag~ in a lambda function
that automatically switches us over to the other window.
(Did not find any way to configure this behavior
using projectile variables or function arguments).

#+begin_src emacs-lisp
(use-package ag
  :init
  (with-eval-after-load 'evil-maps (define-key evil-normal-state-map (kbd "C-n") (lambda () (interactive) (call-interactively 'projectile-ag) (other-window 1)))))
#+end_src

* Install counsel, ivy, swiper

#+begin_src emacs-lisp
(use-package counsel
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) "))
#+end_src

** Add Keybindings

*** Ivy-based interface to standard commands

Adopting suggested keybindings from [[https://oremacs.com/swiper/#global-key-bindings][here]].

#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "<f2> j") 'counsel-set-variable)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-c v") 'ivy-push-view)
(global-set-key (kbd "C-c V") 'ivy-pop-view)
#+end_src

*** Ivy-based interface to standard commands

#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'counsel-compile)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c L") 'counsel-git-log)
(global-set-key (kbd "C-c k") 'counsel-rg)
(global-set-key (kbd "C-c m") 'counsel-linux-app)
(global-set-key (kbd "C-c n") 'counsel-fzf)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-c J") 'counsel-file-jump)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(global-set-key (kbd "C-c w") 'counsel-wmctrl)
#+end_src

*** Ivy-based interface to standard commands

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "C-c b") 'counsel-bookmark)
(global-set-key (kbd "C-c d") 'counsel-descbinds)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c o") 'counsel-outline)
(global-set-key (kbd "C-c t") 'counsel-load-theme)
(global-set-key (kbd "C-c F") 'counsel-org-file)
#+end_src

* Install avy

[[https://github.com/abo-abo/avy][Avy]] provides an efficient, character / tree-based approach to jumping to a line or matching substring.

#+begin_src emacs-lisp
(use-package avy
  :config
  (global-set-key (kbd "C-l") 'avy-goto-line)
  (global-set-key (kbd "M-l") 'avy-goto-char-timer))
#+end_src

* Install flycheck

While we won't enable flycheck globally (via ~(global-flycheck-mode)~),
we don't want the ability to check syntax across various modes.
[[https://www.flycheck.org][Flycheck]] - a replacement for [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html][Flymake]] - should do the trick.

The quickstart guide for Flycheck is available [[https://www.flycheck.org/en/latest/user/quickstart.html][here]].

#+begin_src emacs-lisp
(use-package flycheck)
#+end_src

To enable flycheck in a buffer, call ~M-x flycheck-mode~.

* Install company

[[https://company-mode.github.io/][company-mode]] offers very helpful auto-completion.

#+begin_src emacs-lisp

(use-package company
    :config (add-hook 'after-init-hook 'global-company-mode))

#+end_src

* Install vimish-fold

[[https://github.com/matsievskiysv/vimish-fold][vimish-fold]] lets you fold a region, or lets you fold down to a point specified using avy.
It calls out the folded region using the left sidebar (instead of ellipses)
which feels a little cleaner.

#+begin_src emacs-lisp
(use-package vimish-fold
  :config
  (vimish-fold-global-mode 1)
  (global-set-key (kbd "C-c @ a") #'vimish-fold-avy)
  (global-set-key (kbd "C-c @ f") #'vimish-fold)
  (global-set-key (kbd "C-c @ v") #'vimish-fold-delete)
  (global-set-key (kbd "C-c @ U") #'vimish-fold-unfold-all))
#+end_src

* Install Base16 Theme

Use base16-eighties from the [[https://github.com/tinted-theming/base16-emacs][base16-theme]] package.

#+begin_src emacs-lisp
(use-package base16-theme
    :config (load-theme 'base16-eighties t))
#+end_src

* Install dockerfile-mode

Use [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]]
to enable Dockerfile syntax highlighting.

#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src

* Dvorak Tweaks

** Swap C-x and C-t

On a Dvorak keyboard, ~C-x~ is a stretch. Literally.
Globally replace ~C-x~ with ~C-t~ (and vice-versa).

#+begin_src emacs-lisp
(keyboard-translate ?\C-t ?\C-x)
(keyboard-translate ?\C-x ?\C-t)
#+end_src

** Replace M-x with C-m

~M-x~ is frequently used, but not as convenient to enter as a Control command.
Globally replace ~M-x~ with ~C-m~.

#+begin_src emacs-lisp
(keyboard-translate ?\C-m ?\M-x)
#+end_src

* Nyan-Mode

An analog indicator of your position in the buffer.
With a little help from [[https://github.com/TeMPOraL/nyan-mode][Nyan Cat]].

Use ~M-x nyan-mode~ to enable.

#+begin_src emacs-lisp
(use-package nyan-mode)
#+end_src

* Automatically Switch to Opened Window

** Automatically Switch to Help Window

Requesting this behavior is as easy as setting ~help-window-select~. Perfect.

#+begin_src emacs-lisp
(setq help-window-select t)
#+end_src

** Automatically Switch to Opened Window After Splitting Windows

When emacs splits the current window (horizontally or vertically),
point remains in the current window.
I almost always want to hop over to the new window.

Unfortunately, to make this change we can't set a global variable or pass in an argument.
Instead, we replace the default function with a lambda
that calls the original function and then calls ~other-window~.

For more thougts on this tweak -- including reasons why ~advice-add~ should not be used --
check out [[https://stackoverflow.com/questions/6464738/how-can-i-switch-focus-after-buffer-split-in-emacs][this Stackoverflow question]].

#+begin_src emacs-lisp
(global-set-key "\C-x2" (lambda () (interactive)(split-window-below) (other-window 1)))
(global-set-key "\C-x3" (lambda () (interactive)(split-window-right) (other-window 1)))
#+end_src

* Configure mode line

The default mode line is long and gets cut off when the frame is split.
Update the default mode line to be shorter.

Information on mode line variables can be found [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html][here]].

#+begin_src emacs-lisp
(setq-default mode-line-format
  '("%e"
    evil-mode-line-tag
    mode-line-mule-info
    mode-line-modified
    " "
    mode-line-buffer-identification
    " "
    mode-line-position
    mode-line-misc-info
    (vc-mode vc-mode)
    " "
    mode-line-end-spaces))
#+end_src

* Set ~exec-path~ from shell path

This is especially helpful when running Emacs on Mac OSX,
where Brew apps are otherwise not visible to Emacs.

When running ZSH on Mac, make sure that ~export PATH=...~ statements
are placed in ~.zprofile~; ~.zshrc~ is not sourced by the function below!

#+begin_src emacs-lisp
(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match
that used by the user's shell.

This is particularly useful under Mac OS X and macOS, where GUI
apps are not started from a shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string
                          "[ \t\n]*$" "" (shell-command-to-string
                                          "$SHELL --login -c 'echo $PATH'"
                                         ))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

(set-exec-path-from-shell-PATH)
#+end_src
