#+STARTUP: OVERVIEW

* Introduction

* Pre-flight steps

Initialize ~skip-dev-config~ (if necessary).
This variable indicates whether to skip sections focused on
installing developpment-focused packages.

#+begin_src emacs-lisp
; initialize skip-dev-config if not defined
(if (not (boundp 'skip-dev-config))
    (setq skip-dev-config nil))
#+end_src

Uncomment to profile loading profile.

#+begin_src emacs-lisp
  ;(require 'profiler)
  ;(profiler-start 'cpu)
#+end_src

* Bootstrap Package Manager

Using [[https://github.com/jwiegley/use-package#getting-started][straight.el]] and use-package.

See [[https://jeffkreeftmeijer.com/emacs-straight-use-package/][this article]] for benefits of using straight.el.

** Bootstrap straight

#+begin_src emacs-lisp
  (message "bootstrapping straight.el")

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Disable package.el in favor of straight.el

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

** Install use-package

use-package allows for you to install and configure a package in one step.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

*** Configure use-package to use straight.el by default

#+begin_src emacs-lisp
  (message "load straight")
  (use-package straight
      :custom (straight-use-package-by-default t))
#+end_src

Now in order to install a package, all we need to do is:

#+begin_src emacs-lisp
  ; (use-package evil-commentary)
#+end_src

There are options for configuring packages with straight.el, too:
- ~:init~ - code that will be run before installing the package
- ~:config~ - code that will be run right after the package is installed
- ~:bind~ - adds key bindings after a module has been installed
- ~:custom:~ - set customizable variables

See the straight.el [[https://github.com/jwiegley/use-package#getting-started][getting started guide]] for more documentation on how to load and configure packages with straight.el.

* Add Melpa as Package Source

Add [[https://melpa.org/#/][Milkypostman's Emacs Lisp Package Archive (MELPA)]] as a package archive.

This was first introduced in order to install [[https://www.orgroam.com/manual.html#A-Brief-Introduction-to-the-Zettelkasten-Method][Org-roam]].

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
#+end_src

* Global Preferences
** Disable GUI elements

Disable GUI elements. Will rely on key bindings.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

** Disable tabs

Never, ever use [[https://www.emacswiki.org/emacs/IndentationBasics#h5o-1][tabs]].

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Highlight current line

It's easy to lose track of where the cursor is.
Globally enable line highlighting.

Continue to highlight a line even when focus has moved to
another window.

#+begin_src emacs-lisp
 (global-hl-line-mode 1)
 (setq global-hl-line-sticky-flag t)
#+end_src

** Show trailing whitespace

Otherwise, don't notice this until it's time to commit changes.

#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
#+end_src

** Misc

#+begin_src emacs-lisp
  (show-paren-mode 1)
  (setq initial-scratch-message nil)
  (setq confirm-kill-emacs 'y-or-n-p)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Allow [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html][narrowing]] to a region (~C-x n n~)

#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+end_src

* Global Keybinding Tweaks

** Replace M-x with C-m

~M-x~ is frequently used, but not as convenient to enter as a Control command.
Globally replace ~M-x~ with ~C-m~.

#+begin_src emacs-lisp
  (keyboard-translate ?\C-m ?\M-x)
#+end_src

** Map ~C-k~ to ~kill-buffer~

I need to kill buffers all. the. time.
Let's make it easier.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-k") #'kill-current-buffer)
#+end_src

** Map ~C-.~ to ~delete-window~

I also need to kill windows all the time.
Let's make that easier, too.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-.") #'delete-window)
#+end_src
* Configure Dired

Enabled [[https://www.emacswiki.org/emacs/DiredOmitMode][Dired Omit Mode]] to hide uninteresting files.
Update regex filter used to omit files so that Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup-Names.html#Backup-Names][backup files]] are excluded, too.

#+begin_src emacs-lisp
  (setq dired-omit-files "\\`[.]?#\\|~$\\|__pycache__\\|.swp\\|.pytest_cache")
  (add-hook 'dired-mode-hook (lambda ()
                               (dired-omit-mode)))
#+end_src

* Configure org-mode

org-mode code blocks may seem to have improper indenting.
Remember to use [[https://orgmode.org/manual/Editing-Source-Code.html][C-c ']] to get proper indenting.

#+begin_src emacs-lisp
  (straight-use-package
   '(org
     :type git
     :repo "https://git.savannah.gnu.org/git/emacs/org-mode.git"
     :local-repo "org"
     :depth full
     :pre-build (straight-recipes-org-elpa--build)
     :build (:not autoloads)
     :files (:defaults "lisp/*.el" ("etc/styles/" "etc/styles/*")))
   )
#+end_src

Create [[https://orgmode.org/manual/Activation.html#Activation][recommended]] keybindings for org-mode.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
#+end_src

Add support for TODO, DOING, and DONE states when working with [[https://orgmode.org/manual/TODO-Basics.html][TODO items]].

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence
           ;; open items
           "TODO"
           "DOING"
           "|"  ; entries after pipe are considered completed in [%] and [/]
           ;; closed items
           "DONE"
           "BLOCKED"
           )))

  (setq org-todo-keyword-faces
        '(
          ("TODO" . "light pink")
          ("DOING" . "yellow")
          ("DONE" . "light green")
          ("BLOCKED" . "red")
          ))
#+end_src

Include org files in agenda if they are in ~\~/org/agenda~.

#+begin_src emacs-lisp
  (setq org-directory (expand-file-name "~/org"))

  (let ((agenda-dir (expand-file-name "agenda" org-directory)))
      (setq org-agenda-files (list agenda-dir))
      (setq org-default-notes-file (expand-file-name "notes.org" agenda-dir)))
#+end_src

Customize org-agenda layout.

#+begin_src emacs-lisp
  (setq org-agenda-prefix-format
        (quote
         ((agenda . "%s   %?-12t %e ")
          (timeline . "  %s")
          (todo . " ")                 ; using org-super-agenda header instead of filename
          (tags . " %i %e ")
          (search . " %i %e "))))
#+end_src

Enable [[https://www.emacswiki.org/emacs/AutoFillMode][auto-fill-mode]] for org-mode.
Set ~fill-column~ to ~80~.

#+begin_src emacs-lisp
  (setq fill-column 80)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

Add support for links that open PDFs to a given page.
(Retrieved from [[https://emacs.stackexchange.com/a/52920][this emacs.stackexchange.com answer]] on 2023-08-11).

#+begin_src emacs-lisp
  (defun org-pdf-open (link)
    "Where page number is 105, the link should look like:
     [[pdf:/path/to/file.pdf#page=105][My description.]]"
    (let* ((path+page (split-string link "#page="))
           (pdf-file (car path+page))
           (page (car (cdr path+page))))
      (start-process "view-pdf" nil "evince" "--page-index" page pdf-file)))

  (org-add-link-type "pdf" 'org-pdf-open nil)
#+end_src

* Install sqlite3

TODO: What is this a prerequisite for?

#+begin_src emacs-lisp
  (use-package sqlite3)
#+end_src


* Configure org-super-mode

Use org-super-mode to add support for using headings with org-agenda.

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :after org-agenda
    :config
    (org-super-agenda-mode))

  (setq org-agenda-custom-commands
        '(("g" "Grouped TODOs"
           ((alltodo ""
                     ((org-super-agenda-groups
                       '((:auto-group t)))))))
          ("p" "Priority A tasks"
           ((alltodo ""
                     ((org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'notregexp "\\[#A\\]"))
                      (org-agenda-overriding-header "🔥 High Priority Tasks")))))
          ("q" "Priority B tasks"
           ((alltodo ""
                     ((org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'notregexp "\\[#B\\]"))
                      (org-agenda-overriding-header "🔥 Medium Priority Tasks")))))))
#+end_src

* Install org-download

Install [[https://github.com/abo-abo/org-download][org-download]].

Instruct org to always display inline images.

Configure org-download to store images in an ~images~ directory
located in the current directory of the Org file.

Finally, instruct org-download to _not_ use the org-mode heading
to help organize images on the file system
(e.g. do not create a sub-directory with the current heading's name).

Bind ~org-download-clipboard~
-- which "pastes" the contents of the clipboard into the current org file --
to ~M-g~.


#+begin_src emacs-lisp
          ; Ensure org-pictures directory exists
  (message "load org-download")
  (use-package org-download
    :config
    (add-hook 'dired-mode-hook 'org-download-enable)
    :custom
    (org-startup-with-inline-images t)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    :bind
    ("M-g" . org-download-clipboard))
#+end_src

* Install evil

See [[https://evil.readthedocs.io/en/latest/index.html][this page]] for information on how to get started with evil mode.

In the ~config~ section, set ~evil-want-C-i-jump~ to ~nil~ since ~C-i~ is tab and we want to preserve tab's default behavior.
(If we don't set this to ~nil~, tab will invoke ~evil-jump-forward~ instead of ~org-cycle~ in org-mode, for example,
preventing us from cycling through the different folding options for a node).

For some reason, the above approach works in Debian, but not Mac OSX.
Taking things a step further, we also use ~with-eval-after-load~ to forcefully unset tab in ~evil-motion-state-map~.
(Found this approach [[https://github.com/emacs-evil/evil/issues/1604][here]].)

#+begin_src emacs-lisp
  (message "load evil")
  (use-package evil
    :config
    (evil-mode)
    (evil-set-initial-state 'help-mode 'emacs)
    (evil-set-initial-state 'Info-mode 'emacs)
    (evil-set-initial-state 'ivy-occur-mode 'emacs)
    (evil-set-undo-system 'undo-tree)
    (setq evil-want-C-i-jump nil)
    (with-eval-after-load 'evil-maps (define-key evil-motion-state-map (kbd "TAB") nil))
    (with-eval-after-load 'evil-maps (define-key evil-motion-state-map (kbd "C-b") 'org-roam-node-find))
    (with-eval-after-load 'evil-maps (define-key evil-normal-state-map (kbd "C-r") 'org-roam-capture))
    (with-eval-after-load 'evil-maps (define-key evil-motion-state-map (kbd "C-d") 'avy-goto-char-timer))
    (with-eval-after-load 'evil-maps (define-key evil-normal-state-map (kbd "C-p") 'projectile-command-map))
    (with-eval-after-load 'evil-maps (define-key evil-normal-state-map (kbd "C-.") 'delete-window)))
#+end_src

* Install magit

We can't go anywhere without [[https://magit.vc/][Magit]]!

Include a hook that drops the user into emacs mode when prompted for a Git commit message.

#+begin_src emacs-lisp
  (message "load magit")
  (use-package magit
    :config
    (add-hook 'git-commit-mode-hook 'evil-emacs-state))
#+end_src

Make the Magit status window the only window in view when it opens.

#+begin_src emacs-lisp
  (defun jl/magit-status ()
    "Open magit-status window by itself"
    (interactive)
    (magit-status)
    (delete-other-windows))
  (define-key (current-global-map) [remap magit-status] 'jl/magit-status)
#+end_src

* Install browse-at-remote

[[https://github.com/rmuslimov/browse-at-remote][browse-at-remote]] opens the GitHub page
corresponding to current location in buffer.


#+begin_src emacs-lisp
  (use-package browse-at-remote)
  (global-set-key (kbd "C-c g g") 'browse-at-remote)

  ; When working with Enterprise GitHub, let browse-at-remote
  ; know that the remote represents a Git Hub repository by running:
  ; > git config --add browseAtRemote.type "github"

  ; If all remotes use github, you can apply this setting globally with:
  ; > git config --global --add browseAtRemote.type "github"
#+end_src

* Install org-roam

Install [[https://www.orgroam.com/manual.html][Org-roam]].

Be aware that Org-roam tends to assume that
newer versions of Emacs packages are installed
(e.g. org-mode, magit).

#+begin_src emacs-lisp
  (message "load org-roam")
  (use-package org-roam
    :ensure t
    :bind (("C-c h" . (lambda () (interactive) (call-interactively 'org-roam-buffer-toggle) (other-window 1)))
           ("C-c i" . org-roam-node-insert)
           ("C-c u" . org-roam-dailies-goto-today)
           ("C-c y" . org-roam-dailies-goto-yesterday)
           ("C-c n" . jl/org-roam-goto-week-by-number))
    :config
    (setq org-roam-completion-everywhere t)
    (evil-set-initial-state 'org-roam 'emacs))
#+end_src

Create and configure default Org-roam directory.

#+begin_src emacs-lisp
  (defvar jl-org-roam-default-dir "~/org-roam/")
  (defvar jl-org-roam-default-db "~/.emacs.d/org-roam-default.db")

  (make-directory jl-org-roam-default-dir t)

  (setq org-roam-directory (file-truename jl-org-roam-default-dir))
  (setq org-roam-db-location (file-truename jl-org-roam-default-db))

  (defvar jl-org-roam-current-dir 'default "Current Org-roam directory in use.")
#+end_src

Add support for second org-roam database for offensive security notes

#+begin_src emacs-lisp
  (defvar jl-org-roam-offsec-dir "~/org-roam-offsec/")
  (defvar jl-org-roam-offsec-db "~/.emacs.d/org-roam-offsec.db")

  (make-directory jl-org-roam-offsec-dir t)

  (defun offsec-notes ()
    "Switch between default and offensive security org-roam notes"
    (interactive)

    (if (eq jl-org-roam-current-dir 'default)
        (progn
          (setq org-roam-directory jl-org-roam-offsec-dir)
          (setq org-roam-db-location jl-org-roam-offsec-db)
          (setq jl-org-roam-current-dir 'offsec)
          (message "Switched to Org-roam directory: %s" jl-org-roam-offsec-dir))
      (progn
        (setq org-roam-directory jl-org-roam-default-dir)
        (setq org-roam-db-location jl-org-roam-default-db)
        (setq jl-org-roam-current-dir 'default)
        (message "Switched to Org-roam directory: %s" jl-org-roam-default-dir))))

  (global-set-key (kbd "C-c o") 'offsec-notes)
#+end_src

** Prompt Org-roam indexing

This may take some time during the first run.
Subsequent runs should be much faster,
as they will only process modified files.

Can call ~M-x org-roam-db-sync~ interactively to re-index.

#+begin_src emacs-lisp
  (org-roam-db-autosync-mode)
#+end_src

** Configure org-roam capture templates

#+begin_src emacs-lisp
  (setq org-roam-capture-templates
    '(("d" "default" plain "%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
  ")
        :unnarrowed t)
      ("c" "common template" plain "* Overview

\* Reference

\* Links

%?

\* History

\* See Also

"       :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
")
        :unnarrowed t)
        ("h" "history note" plain "** %<%Y-%m-%d %H:%M> %?"
         :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}"
                                ("History"))
         :empty-lines 1)
        ("y" "year note" plain "* %<%Y>"
         :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
"))))
  (global-set-key (kbd "C-r") #'org-roam-capture)
#+end_src

* Install YASnippet

Install [[https://www.emacswiki.org/emacs/Yasnippet][YASnippet]].

Snippet examples available [[https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/snippets][here]].

Walkthrough of using snippets available [[https://blog.alex-miller.co/emacs/spacemacs/2017/05/28/yasnippets.html][here]].

#+begin_src emacs-lisp
  (message "load yasnippet")
  (use-package yasnippet
    :config
    (yas-global-mode)
    (setq yas-indent-line 'fixed))
#+end_src

* Install yaml-mode

Install [[https://github.com/yoshiki/yaml-mode][yaml-mode]].

More information on yaml-mode is available [[https://www.emacswiki.org/emacs/YamlMode][here]].

#+begin_src emacs-lisp
  (message "load yaml-mode")
  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

* Install perspective

[[https://github.com/nex3/perspective-el][Perspective]] offers the ability to:
- Create (named) window layouts, refered to as perspectives
- Save perspectives to disk
- Only list buffers used by current perspective

Key Perspective commands are outlined [[https://github.com/nex3/perspective-el#usage][here]].

The Perspective prefix key is set to ~C-c~ ~C-z~ below.

#+begin_src emacs-lisp
  (message "load perspective")
  (use-package perspective
    :custom
    (persp-mode-prefix-key (kbd "C-c C-z"))
    :init
    (persp-mode)
    :config
    (setq persp-state-default-file "~/.emacs.d/persp-"))
#+end_src

* Install projectile

[[https://projectile.mx/][Projectile]] offers several commands for interacting with files within the scope of a project.

Map ~projectile-find-file~ to ~C-f~ in the ~evil-normal-state-map~
because of how frequently this gets called.
We map this in ~evil-normal-state-map~ specifically so that ~C-f~ is not shadowed in other modes
where it is less likely to be used anyways.

#+begin_src emacs-lisp
  (message "load projectile")
  (use-package projectile
    :init
    (setq projectile-project-search-path
          '("~/git/" "~/org/" "~/.emacs.d"
            ("~/johnny-bookkeeper" . 5)
            ("~/johnny-do-your-work" . 5)
            ("~/johnny-infosec" . 5)
            ("~/johnny-inventory" . 5)
            ("~/johnny-jim" . 5)
            ("~/johnny-job-search" . 5)
            ("~/johnny-shared" . 5)
            ("~/johnny-steph" . 5)))
    (projectile-mode)
    (with-eval-after-load 'evil-maps (define-key evil-normal-state-map (kbd "C-f") 'projectile-find-file))
    :bind
    (:map projectile-command-map
      ("s s" . (lambda () (interactive) (call-interactively 'projectile-ag) (other-window 1)))))
#+end_src

Install the ag package as well so that projectile can make ag searches.

Map ~projectile-ag~ to ~C-n~ in the ~evil-normal-state-map~
because of how frequently this gets called.
We map this in ~evil-normal-state-map~ specifically so that ~C-n~ is not shadowed in other modes
where it is less likely to be used anyways.

As a convenience, wrap ~projectile-ag~ in a lambda function
that automatically switches us over to the other window.
(Did not find any way to configure this behavior
using projectile variables or function arguments).

#+begin_src emacs-lisp
  (message "load ag")
  (use-package ag
    :init
    (with-eval-after-load 'evil-maps
      (define-key evil-normal-state-map (kbd "C-n")
        (lambda () (interactive)
          (call-interactively 'projectile-ag)
          (other-window 1))))
    :config
    (add-hook 'ag-mode-hook 'evil-emacs-state))
#+end_src

Create a custom initial project view
that will be used when invoking ~projectile-switch-project~.

#+begin_src emacs-lisp
  (defun open-last-modified-scm-file ()
    "Determine most recently modified file according to Git"
    (interactive)
    (let ((my-output-buffer (generate-new-buffer "*git-last-modified-file*"))
          (my-project-directory (cdr (project-current))))
      (call-process "git" nil my-output-buffer nil "-C" my-project-directory "log" "-1" "--name-only" "--format=oneline" "--no-merges")
      (save-excursion
        (with-current-buffer my-output-buffer
          (goto-char (point-max))
          (join-line)
          (setq my-last-modified-scm-file (concat my-project-directory (buffer-substring (point-at-bol) (point-at-eol))))
          (kill-buffer my-output-buffer))))
    (find-file my-last-modified-scm-file))

  (defun jl/default-project-view ()
    ""
    (interactive)
    (open-last-modified-scm-file)
    (call-interactively 'magit-fetch-all))
  (setq projectile-switch-project-action #'jl/default-project-view)
#+end_src

* Install avy

[[https://github.com/abo-abo/avy][Avy]] provides an efficient, character / tree-based approach to jumping to a line or matching substring.

#+begin_src emacs-lisp
  (message "load avy")
  (use-package avy
    :config
    (global-set-key (kbd "C-l") 'avy-goto-line))
#+end_src

* Install Hydra
Collapse a series of keybindings into single keystrokes using [[https://github.com/abo-abo/hydra][Hydra]].

Note that the [[https://github.com/abo-abo/hydra#color][:color]] key has a special meaning with hydras;
red hydra heads do not exit,
whereas blue hydra heads exit after executing their action.

In the snippet below, all heads are red by default,
but the ~C-w~ head is marked as blue.
So to exit the hydra, the user can press ~C-w~.

#+begin_src emacs-lisp
  (message "load hydra")
  (use-package hydra)

  ; From https://blog.genenakagaki.com/en/my-emacs-life-is-better-with-hydra.html
  (defhydra hydra-window (global-map "C-c w" :color red)
    "
  | Navigation^^      | Placement^^         | Create, Delete^^          | Adjustment^^         |
  |^^-----------------+^^-------------------+^^-------------------------+^^--------------------|
  | _h_: go left      | _H_: move to left   | _v_: split vertically     | _=_: balance windows |
  | _j_: go down      | _J_: move to bottom | _s_: split horizontally   | _+_: increase height |
  | _k_: go up        | _K_: move to top    | _q_: delete window        | _-_: decrease height |
  | _l_: go right     | _L_: move to right  | _Q_: delete other windows | _>_: increase width  |
  | _w_: go to next   | ^^                  | ^^                        | _<_: decrease width  |
  | _C-w_: go to next | ^^                  | ^^                        | ^^                   |
  "
    ("+"   evil-window-increase-height)
    ("-"   evil-window-decrease-height)
    ("<"   evil-window-decrease-width)
    (">"   evil-window-increase-width)
    ("="   balance-windows)
    ("C-w" evil-window-next nil :color blue)
    ("H"   evil-window-move-far-left)
    ("J"   evil-window-move-very-bottom)
    ("K"   evil-window-move-very-top)
    ("L"   evil-window-move-far-right)
    ("h"   evil-window-left)
    ("j"   evil-window-down)
    ("k"   evil-window-up)
    ("l"   evil-window-right)
    ("q"   evil-window-delete)
    ("Q"   delete-other-windows)
    ("s"   evil-window-split)
    ("v"   evil-window-vsplit)
    ("w"   evil-window-next))
#+end_src

* Install flycheck

While we won't enable flycheck globally (via ~(global-flycheck-mode)~),
we don't want the ability to check syntax across various modes.
[[https://www.flycheck.org][Flycheck]] - a replacement for [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html][Flymake]] - should do the trick.

The quickstart guide for Flycheck is available [[https://www.flycheck.org/en/latest/user/quickstart.html][here]].

#+begin_src emacs-lisp
  (message "load flycheck")
  (use-package flycheck)
#+end_src

To enable flycheck in a buffer, call ~M-x flycheck-mode~.

* Install company

[[https://company-mode.github.io/][company-mode]] offers very helpful auto-completion.

company-mode [[https://emacs.stackexchange.com/questions/10837/how-to-make-company-mode-be-case-sensitive-on-plain-text][ignores case by default]].
The configuration below ensures case is preserved.

#+begin_src emacs-lisp
  (message "load company")
  (use-package company
      :config
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-dabbrev-downcase nil)
      (setq company-dabbrev-ignore-case nil)
      (setq company-keywords-ignore-case nil)
      (setq company-dabbrev-code-ignore-case nil)
      (setq company-etags-ignore-case nil)
      (setq company-idle-delay 0.4))
#+end_src

* Install GPTel

Install [[https://github.com/karthink/gptel][GPTel]], an LLM client for Emacs.

See [[https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key][this page]] for tips on getting an OpenAI API key.
Retrieve your API key from [[https://platform.openai.com/api-keys][this page]].
See [[https://github.com/karthink/gptel?tab=readme-ov-file#chatgpt][these notes]] for tips on retrieving your API key
from your Emacs config.

#+begin_src emacs-lisp
  ;; Add to their existing configuration
  (use-package gptel
    :config
    (setq gptel-api-key (getenv "OPENAI_API_KEY")
          gptel-model "gpt-4.1-mini")
    (global-set-key (kbd "C-c a") 'gptel)
    (global-set-key (kbd "C-c A") 'gptel-send))
#+end_src

* Install Base16 Theme

Use base16-eighties from the [[https://github.com/tinted-theming/base16-emacs][base16-theme]] package.

#+begin_src emacs-lisp
  (message "load base16-theme")
  (use-package base16-theme
      :config (load-theme 'base16-eighties t))
#+end_src

* Install undo-tree

[[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] provides a convenient tool for mapping out previous undo steps.
It also restructures undos / redos as a tree, instead of as a linear series of events.

Move undo data to ~.emacs.d/backups/undo-tree~.
These files were confusing org-roam.

#+begin_src emacs-lisp
  (message "load undo-tree")
  (use-package undo-tree
    :defer t
    :init
    (global-undo-tree-mode)
    :config
    (progn
      (evil-set-initial-state 'undo-tree-visualizer-mode 'emacs)
      (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/backups/undo-tree")))))

  ; undo-tree hangs when saving history for xml files
  (add-hook 'nxml-mode-hook
            (lambda ()
              (undo-tree-mode -1)))
#+end_src

* Install multiple-cursors

Add support for [[https://github.com/magnars/multiple-cursors.el#readme][multiple cursors]].

An overview video of multiple-cursors is available
[[https://emacsrocks.com/e13.html][here]].

#+begin_src emacs-lisp
  (message "load multiple-cursors")
  (use-package multiple-cursors
    :init
    (global-unset-key (kbd "M-<down-mouse-1>"))
    (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click))
#+end_src

* Install pomm (for pomodoro and third-time techniques)

See [[https://sqrtminusone.xyz/packages/pomm/][pomm]] for overview of features, commands, and configuration
options.

Note that this requires an up-to-date version of transient.el
(provided by [[https://github.com/magit/magit][Magit]]).

#+begin_src emacs-lisp
  (use-package pomm
    :straight t
    :commands (pomm pomm-third-time))
#+end_src

* Nyan-Mode

An analog indicator of your position in the buffer.
With a little help from [[https://github.com/TeMPOraL/nyan-mode][Nyan Cat]].

Use ~M-x nyan-mode~ to enable.

#+begin_src emacs-lisp
  (message "load nyan-mode")
  (use-package nyan-mode)
#+end_src

* Show the weather with [[https://wttr.in][wttr.in]]

Install [[https://github.com/bcbcarl/emacs-wttrin][wttr.el]].

Use [[https://github.com/etiago/emacs-wttrin/tree/user-agent-fix][etiago's patch]] to fix an [[https://github.com/bcbcarl/emacs-wttrin/issues/16][issue]] where raw html is shown.

#+begin_src emacs-lisp
  (use-package wttrin
    :straight (:type git
                     :host nil
                     :repo "git@github.com:etiago/emacs-wttrin.git"
                     :branch "user-agent-fix")
    :custom
    (wttrin-default-cities '("Portland")))

  (advice-add 'wttrin
              :after
              (lambda (&rest args)
                (setq show-trailing-whitespace nil)
                (evil-emacs-state)))
#+end_src

* Advanced Developer Configuration
** Install vterm

Be sure to follow the [[https://github.com/akermu/emacs-libvterm#installation][installation instructions]] before using vterm.

Start vterm-mode in Emacs mode;
in Normal mode the user is limited to navigating a read-only buffer.
Refer to Evil mode for an explanation of Emacs mode versus Vim modes.

Disable highlighting (which is quirky when applied to the terminal).

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load vterm")
    (use-package vterm
        :ensure t
        :config
        (evil-set-initial-state 'vterm-mode 'emacs)
        (add-hook 'vterm-mode-hook
                (lambda ()
                    (set (make-local-variable 'global-hl-line-mode) nil)
                    (setq show-trailing-whitespace nil)))))
  (with-eval-after-load 'vterm
    (define-key vterm-mode-map (kbd "C-b") 'org-roam-node-find)
    (define-key vterm-mode-map (kbd "C-p") 'projectile-command-map)
    (define-key vterm-mode-map (kbd "C-.") 'delete-window)

    ; Close vterm buffer even if the shell session is still active
    ; https://github.com/akermu/emacs-libvterm/issues/668#issuecomment-1502860025
    (setq kill-buffer-query-functions nil))
  (setq vterm-keymap-exceptions (append vterm-keymap-exceptions '("C-w")))
#+end_src

** Install Git time machine

[[https://github.com/emacsmirror/git-timemachine][Git time machine]] looks like a very useful way of walking through a file's version history.

Map ~git-timemachine-toggle~ to ~C-x G~.
Note that ~C-x g~ will still map to ~jl/magit-status~ (a wrapper for ~magit-status~).

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load git-timemachine")
    (use-package git-timemachine
        :config
        (evil-set-initial-state 'git-timemachine-mode 'emacs)
        (global-set-key (kbd "C-x G") 'git-timemachine-toggle)))
#+end_src

** Install markdown-mode

Install [[https://github.com/jrblevin/markdown-mode][markdown-mode]].

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load markdown-mode")
    (use-package markdown-mode))
#+end_src

** Install json-mode

Install [[https://github.com/json-emacs/json-mode][json-mode]].

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load json-mode")
    (use-package json-mode))
#+end_src

** Install json-navigator

Install [[https://github.com/DamienCassou/json-navigator][json-navigator]].

Note:
If Emacs complains about a void variable while trying to load the hierarchy package,
it is likely due to a [[https://github.com/ahungry/md4rd/issues/32#issuecomment-1469697100][dependency pointing to the old version of hierarchy]].

In my case, I noticed that in
~.emacs.d/straight/repos/melpa/recipes/hierarchy~,
there was the following definition:

~(hierarchy :fetcher github :repo "DamienCassou/hierarchy")~.

Deleting this file cleared up the errors I was seeing.

The hierarchy package became a part of Emacs core, so dependency
definitions like this should eventually be purged
or marked as only applying to older versions of Emacs.

More specifically, it seems like [[https://github.com/melpa/melpa/blob/master/recipes/hierarchy][this recipe for hierarchy]]
should either be removed or marked as only applying to older versions
of Emacs.

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load json-navigator")
    (use-package json-navigator
        :requires hierarchy))
#+end_src

** Install terraform-mode

Installs [[https://github.com/hcl-emacs/terraform-mode][terraform-mode]]

Includes support for [[https://www.emacswiki.org/emacs/OutlineMinorMode][outline-minor-mode]].

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load terraform-mode")
    (use-package terraform-mode
    :straight t
    :custom (terraform-indent-level 2)
    :config
    (defun my-terraform-mode-init ()
        (outline-minor-mode 1))

    (add-hook 'terraform-mode-hook 'my-terraform-mode-init)))
#+end_src

** Install VLF

Install [[https://github.com/m00natic/vlfi][VLF]], a mode for reading very large files in batch.

To view a large file, use ~M-x vlf~ and then enter the file's path.

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load vlf")
    (use-package vlf))
#+end_src

** Install typescript-mode

A minimal setup for working with TypeScript.
[[https://www.emacswiki.org/emacs/TypeScript][typescript-mode]] provides highlight modes for TypeScript.

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load typescript-mode")
    (use-package typescript-mode))
#+end_src

** Install groovy-mode

Installs [[https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes][groovy-mode]].

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load groovy-mode")
    (use-package groovy-mode))
#+end_src

** Install [[https://github.com/mooz/js2-mode/][js2-mode]]

Install js2-mode
and enable for ~*.js~ files.

More tips on how to configure js2-mode and friends is available [[https://web.archive.org/web/20231009082516/https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][here]].

#+begin_src emacs-lisp
  (use-package js2-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+end_src

** Install Steel Bank Common Lisp and slime

What better way to code in Lisp than to use
[[http://www.sbcl.org/][Steel Bank Common Lisp]] and [[https://slime.common-lisp.dev/][slime]]? 😁

There are currently two manual steps required before this section will
work:

To install sbcl on Debian 12, run:
> sudo apt install sbcl sbcl-doc

To install sbcl on Mac, run:
> brew install sbcl

To clone the slime repo, run:
> git clone git@github.com:slime/slime.org ~/git/slime

#+begin_src emacs-lisp
  (unless skip-dev-config
    (message "load slime")
    (add-to-list 'load-path "~/git/slime")
    (require 'slime-autoloads)
    (setq inferior-lisp-program "/usr/bin/sbcl"))
    ; TODO: apply correct path to sbcl based on platform
    ;
    ; On macs, with brew installs of sbcl, path should be:
    ; (setq inferior-lisp-program "/opt/homebrew/bin/sbcl"))
#+end_src

One of slime's dependencies, [[https://github.com/joddie/macrostep/blob/master/README.org][macrostep]], has been archived according to
it's readme (on 2024-07-11).

Based on [[https://github.com/emacsorphanage/macrostep/commit/4939d88779761e8b5461b4cf73f86600172987db][this commit]] in the emacsorphanage clone of macrostep,
it looks like the repo may have a new maintainer.

In the meantime, I cannot find macrostep in MELPA,
and calling M-x slime results in the error:

> Symbol's value as variable is void: macrostep-mode-map

To work around this, I have a copy of macrostep.el taken from
[[https://github.com/joddie/macrostep/blob/master/macrostep.el][here]]. Based on my testing, loading this file resolves the macrostep
error.

#+begin_src emacs-lisp
  (load-file "~/.emacs.d/hacky-contrib/macrostep.el")
#+end_src

* Configure slime to use Quicklisp (and friends)

With that in place, let's setup slime.

You will need to [[https://www.quicklisp.org/beta/#installation][install quicklisp]] and the quicklisp slime-helper
for this next part to work.

The basic steps for doing so include:

1. Downloading [[https://www.quicklisp.org/beta/#installation][quicklisp.lisp]]
2. Loading this file with:
   sbcl --load quicklisp.lisp
3. Installing quicklisp (in the sbcl session) with:
   (quicklisp-quickstart:install)
4. Loading the quicklisp setup (TODO: is this necessary? if so, why?)
   (load "~/quicklisp/setup.lisp")
5. Installing quicklisp-slime-helper with:
  (ql:quickload "quicklisp-slime-helper")

#+begin_src emacs-lisp
  (slime-setup '(slime-fancy slime-quicklisp slime-asdf slime-mrepl))

  ; Need to call (ql:quickload "quicklisp-slime-helper")
  ; then this file will get created for you and you can load it.
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
#+end_src

* Install counsel, ivy, swiper

#+begin_src emacs-lisp
  (message "load counsel")
  (use-package counsel
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+end_src

** Add Keybindings

*** Ivy-based interface to standard commands

Adopting suggested keybindings from [[https://oremacs.com/swiper/#global-key-bindings][here]].

#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "<f2> j") 'counsel-set-variable)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)
#+end_src

*** Ivy-based interface to standard commands

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c L") 'counsel-git-log)
  (global-set-key (kbd "C-c k") 'counsel-rg)
  (global-set-key (kbd "C-c m") 'counsel-linux-app)
  ;(global-set-key (kbd "C-c f") 'counsel-fzf)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-c J") 'counsel-file-jump)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
#+end_src

*** Ivy-based interface to standard commands

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "C-c t") 'counsel-load-theme)
  (global-set-key (kbd "C-c F") 'counsel-org-file)
#+end_src

** Install zygospore

[[https://github.com/louiskottmann/zygospore.el][Zygospore]] temporarily hides all but the currently active window.

#+begin_src emacs-lisp
  (message "load zygospore")
  (use-package zygospore
    :config
    (global-set-key (kbd "C-x 1") 'zygospore-toggle-delete-other-windows))
#+end_src

** Install key-chord

[[https://github.com/emacsorphanage/key-chord][Key Chord Mode]] lets you execute a command by pressing two keys down at the same time.

The [[https://www.emacswiki.org/emacs/KeyChord][Emacs Wiki]] has some helpful tips on using this mode.

#+begin_src emacs-lisp
  (message "load key-chord")
  (use-package key-chord)
  (key-chord-mode 1)

  ; If this is too long, then there are noticeable typing delays
  ; If it is too short, then two-key chords are nearly impossible to invoke
  ; https://github.com/emacsorphanage/key-chord/blob/e724def60fdf6473858f2962ae276cf4413473eb/key-chord.el#L37
  (setq key-chord-two-keys-delay 0.025)

  (key-chord-define-global "on"
                           (lambda ()
                             (interactive)
                             (let ((vterm-buffer-name
                                    (concat "*vterm* " (buffer-file-name))))
                               (vterm 'new))))
  (key-chord-define-global "as" 'zygospore-toggle-delete-other-windows)
#+end_src
** Install vimish-fold

[[https://github.com/matsievskiysv/vimish-fold][vimish-fold]] lets you fold a region, or lets you fold down to a point specified using avy.
It calls out the folded region using the left sidebar (instead of ellipses)
which feels a little cleaner.

#+begin_src emacs-lisp
  (message "load vimish-fold")
  (use-package vimish-fold
    :config
    (vimish-fold-global-mode 1)
    (global-set-key (kbd "C-c @ a") #'vimish-fold-avy)
    (global-set-key (kbd "C-c @ f") #'vimish-fold)
    (global-set-key (kbd "C-c @ v") #'vimish-fold-delete)
    (global-set-key (kbd "C-c @ U") #'vimish-fold-unfold-all))
#+end_src

** Install docker.el

[[https://github.com/Silex/docker.el][docker.el]] provides support for managing docker containers, images, volumes, networks, contexts and docker-compose.

Because docker.el doesn't seem to use modes,
used ~add-hook~ with the ~docker-open-hook~ [[https://www.emacswiki.org/emacs/ModeHooks][mode hook]] to switch into Emacs mode
whenever ~C-c d~ is pressed.
(Normal mode masks most, if not all, docker.el bindings).

#+begin_src emacs-lisp
  (message "load docker")
  (use-package docker
  :ensure t
  :bind ("C-c d" . docker)
  :config
  (add-hook 'docker-open-hook 'evil-emacs-state)
  )
#+end_src

** Install dockerfile-mode

Use [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]]
to enable Dockerfile syntax highlighting.

#+begin_src emacs-lisp
  (message "load dockerfile-mode")
  (use-package dockerfile-mode)
#+end_src

** Install kubernetes-el

See [[https://kubernetes-el.github.io/kubernetes-el/getting-started/][kubernetes-el]] for more information.

Call ~kubernetes-overview~ (or its alias, ~k8s~)
to get started.

#+begin_src emacs-lisp
  (message "load kubernetes")
  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview)
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))

  (message "load kubernetes-evil")
  (use-package kubernetes-evil
    :ensure t
    :after kubernetes)

  (fset 'k8s 'kubernetes-overview)
  (evil-set-initial-state 'kubernetes-mode 'emacs)
  (evil-set-initial-state 'kubernetes-logs 'emacs)
  (evil-set-initial-state 'kubernetes-log-line 'emacs)
#+end_src

** Install keepass-mode

[[https://github.com/ifosch/keepass-mode][keepass-mode]] lets you interact with your [[https://keepassxc.org/][KeePassXC Database]].

#+begin_src emacs-lisp
  (message "load keepass-mode")
  (use-package keepass-mode
    :config
    (evil-set-initial-state 'keepass-mode 'emacs))
#+end_src

* Miscellaneous Functions
** Insert Time

Insert timestamp using ~C-c p~.

#+begin_src emacs-lisp
(defun insert-current-date ()
  "Insert the current date in YYYY-MM-DD format."
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

(global-set-key (kbd "C-c p") 'insert-current-date)
#+end_src

** Open org-roam node for (ISO) week of the year

#+begin_src emacs-lisp
  (defun jl/first-day-of-year ()
    "Get first day of year as list (D M Y)"
    (let ((today (calendar-current-date)))
      (setq first-day-of-year (copy-sequence today))
      (setf (nth 0 first-day-of-year) 1)
      (setf (nth 1 first-day-of-year) 1)
      first-day-of-year))

  (defun jl/days-since-start-of-year ()
    "Get number of days since the start of the year"
    (let ((today (calendar-current-date))
          (first-day-of-year (jl/first-day-of-year)))
     (setq today-abs (calendar-absolute-from-gregorian today))
     (setq first-day-of-year-abs
           (calendar-absolute-from-gregorian first-day-of-year))
     (setq days-since-start-of-year
           (1+ (- today-abs first-day-of-year-abs)))))

  (defun jl/day-of-week-iso (date)
    "Given a date in list form (D M Y) returns the day of the week by number, with Monday being 0"
    (% (+ (1- (calendar-day-of-week date)) 8) 7))

  (defun jl/days-since-first-monday-of-first-week ()
    "Get number of days since the start of the year"
    (+ (jl/days-since-start-of-year)
       (jl/day-of-week-iso (jl/first-day-of-year))))

  (defun jl/week-number ()
    "Get current week number"
    (1+ (/ (jl/days-since-first-monday-of-first-week) 7)))

  (defun jl/org-roam-goto-week-by-number ()
      "Visit org-roam node with titile 'Week #'"
    (interactive)
    (org-roam-node-find t (format "Week %s" (jl/week-number))))
#+end_src

** Clear all buffers except *scratch*, all other windows/frames, too

Function ~fresh-start~ helps clear any buffers, windows, or frames
that have been opened during the current session. The function does
preserve the ~*scratch*~ buffer, however.

#+begin_src emacs-lisp
  ; Code generated with the assistance of ChatGPT, version 3.5, developed by OpenAI
  ; More information: https://www.openai.com/chatgpt
  ; Generated on: October 4, 2023

  ; Jim Ladd updated snippet to use ~delete-other-frames~
  ; and to move ~delete-other-windows~ outside of ~let~.

  (defun fresh-start ()
    "Kill all buffers except for *scratch*, close all other windows, and delete all other frames."
    (interactive)
    ;; Close all other frames
    (delete-other-frames)
    (delete-other-windows)
    (let ((buffer-list (buffer-list)))
      ;; Close all other windows
      (dolist (buffer buffer-list)
        (unless (string-equal (buffer-name buffer) "*scratch*")
          (kill-buffer buffer)))
      (message "Fresh start: All buffers except *scratch*, other windows, and frames have been closed.")))
#+end_src

** Edit yaml files with long values (e.g. .kube/config)

#+begin_src emacs-lisp
  (defun jl/edit-yaml-with-long-values ()
    "Edit yaml files with long values"
    (interactive)
    ; hacky test to see if yaml-mode is on
    ; (couldn't find anything more obvious to key off of)
    (unless (equal font-lock-defaults '(yaml-font-lock-keywords))
      (yaml-mode))

    ; truncate long lines
    (toggle-truncate-lines 1))
#+end_src

** Fill region Shortcut

#+begin_src emacs-lisp
  (eval-after-load 'org
    '(progn
       (unbind-key "C-c C-x f" org-mode-map)
       (global-set-key (kbd "C-c C-x f") #'fill-region)))
#+end_src

** Unfill region

Sometimes it can be helpful to do the opposite of [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html][fill-region]].

#+begin_src emacs-lisp
  (defun jl/unfill-paragraph (beg end)
    "Unfill the paragraph, joining text into a single logical line"

    (interactive "r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))
  (global-set-key (kbd "C-c C-x F") #'jl/unfill-paragraph)
#+end_src

(search-forward-regexp "\n[[:space:]]*\n" nil t)

This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line. This is such a long line.

* Mac OS X Convenience Functions

#+begin_src emacs-lisp
  ; Before enabling the function below, create a file called
  ; open_iterm_to_path.scpt using Mac OS X's Script Editor.
  ; The script should be defined as:
  ;
  ; on run argv
  ;     set targetDir to item 1 of argv
  ;     tell appliaciotn "iTerm"
  ;         create window with default profile
  ;         tell current session of current window
  ;             write text "cd " & targetDir & "; tmux"
  ;         end tell
  ;     end tell
  ; end run
  ;
  ; Save the file to /Users/jamesladd/bin/open_iterm_to_path.scpt


  ; (defun jl/open-iterm-in-current-dir ()
  ;     "Open a new iTerm2 window in the current buffer's directory."
  ;   (interactive)
  ;   (let ((current-dir (file-name-directory (or (buffer-file-name) default-directory))))
  ;     (if current-dir
  ;         (start-process "open-iterm" nil "osascript"
  ;                        "/Users/jamesladd/bin/open_iterm_to_path.scpt"
  ;                        current-dir)
  ;       (message "Could not determine the current directory."))))
#+end_src

* Automatically Switch to Opened Window

** Automatically Switch to Help Window

Requesting this behavior is as easy as setting ~help-window-select~. Perfect.

#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

** Automatically Switch to Opened Window After Splitting Windows

When emacs splits the current window (horizontally or vertically),
point remains in the current window.
I almost always want to hop over to the new window.

Unfortunately, to make this change we can't set a global variable or pass in an argument.
Instead, we replace the default function with a lambda
that calls the original function and then calls ~other-window~.

For more thougts on this tweak -- including reasons why ~advice-add~ should not be used --
check out [[https://stackoverflow.com/questions/6464738/how-can-i-switch-focus-after-buffer-split-in-emacs][this Stackoverflow question]].

#+begin_src emacs-lisp
  (global-set-key "\C-x2" (lambda () (interactive)(split-window-below) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive)(split-window-right) (other-window 1)))
#+end_src

* Adjust Font Size for Frame

Add convenience functions (and keybindings) for adjusting font size of
entire frame while preserving frame's dimensions.

Use ~C-x C-=~ to increase font size.
Use ~C-x C--~ to decrease font size.

Use ~C-u <number>~ before using either of the previous chords
to set how much to increment / decrement font size.

Alternatively, ~C-x z~ ([[https://www.gnu.org/software/emacs/manual/html_node/emacs/Repeating.html][repeat]]) can be used to repeat the previous command.
Hitting ~z~ after the initial call to ~C-x z~ can be used as a
shortcut for quickly repeating the previous command.

#+begin_src emacs-lisp
                                          ; Resize the whole frame, and not only a window
  ;; Adapted from:
  ;; https://stackoverflow.com/questions/24705984/increase-decrease-font-size-in-an-emacs-frame-not-just-buffer
  (defun jl/zoom-frame (&optional amt frame)
    "Increaze FRAME font size by amount AMT. Defaults to selected
  frame if FRAME is nil, and to 1 if AMT is nil."
    (interactive "p")
    (let* ((frame (or frame (selected-frame)))
           (font (face-attribute 'default :font frame))
           (size (font-get font :size))
           (size (if (eq size 0) 12 size))  ; hack to avoid case where font-get returns size of 0 on macs
           (amt (or amt 1))
           (new-size (+ size amt)))
      (set-frame-font (font-spec :size new-size) t `(,frame))
      (message "Frame's font new size: %d" new-size)))

  (defun jl/zoom-frame-out (&optional amt frame)
    "Call `jl/zoom-frame' with negative argument."
    (interactive "p")
    (jl/zoom-frame (- (or amt 1)) frame))

  (global-set-key (kbd "C-x C-=") 'jl/zoom-frame)
  (global-set-key (kbd "C-x C--") 'jl/zoom-frame-out)
#+end_src
* Enable frame transparency

#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(98 . 98))
(add-to-list 'default-frame-alist '(alpha . (98 . 98)))
#+end_src

* Configure mode line

The default mode line is long and gets cut off when the frame is split.
Update the default mode line to be shorter.

Information on mode line variables can be found [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html][here]].

#+begin_src emacs-lisp
  (setq-default mode-line-format
    '("%e"
      evil-mode-line-tag
      mode-line-mule-info
      mode-line-modified
      " "
      mode-line-buffer-identification
      " "
      mode-line-position
      mode-line-misc-info
      (vc-mode vc-mode)
      " "
      mode-line-end-spaces))
#+end_src

* Set ~exec-path~ from shell path

This is especially helpful when running Emacs on Mac OSX,
where Brew apps are otherwise not visible to Emacs.

When running ZSH on Mac, make sure that ~export PATH=...~ statements
are placed in ~.zprofile~; ~.zshrc~ is not sourced by the function below!

#+begin_src emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match
  that used by the user's shell.

  This is particularly useful under Mac OS X and macOS, where GUI
  apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -c 'echo $PATH'"
                                           ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+end_src
* Disable auto-save files

In practice, not sure that I have ever used [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save.html][auto-save files]] to recover any data.
And in the meantime, they can form cruft that trips up other applications working with the file tree I'm working with.

Note that this does not affect [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html][backup files]]; these are not created in directories managed by a version control system.

See [[https://emacshints.wordpress.com/2013/09/19/disabling-auto-save-and-backup/][this page]] for a comparison of backup and auto-save files.

#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src

* Store backup files in central location

When looking at directories outside of Emacs (e.g. using a regular shell),
directory contents can quickly become congested by Emacs backup files.
Move them to ~/.emacs.d/backups/emacs~ instead.

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups/emacs")))
#+end_src

* Start server

After Emacs starts, start the Emacs server
so that we can quickly open new sessions with ~emacsclient~.

#+begin_src emacs-lisp
  (defun sole-emacs-process ()
    "Determine if this is the only emacs process that is running."
    (let ((output-buffer (generate-new-buffer "*emacs-process-count*")))
      ; TODO: Mac version cannot use any "--" flags
      ; Instead it should use something like pgrep Emacs
      ; and then count the number of lines returned
      ; Should probably take a similar approach for linux
      ; if it's possible to take the same approach on both OSes
      ;(call-process "pgrep" nil output-buffer nil "--exact" "--count" "emacs")

      (call-process "pgrep" nil output-buffer nil "--exact" "--count" "emacs")
      (save-excursion
        (with-current-buffer "*emacs-process-count*"
          (end-of-buffer)
          (join-line)
          (let ((buffer-contents (buffer-substring-no-properties (point-min) (point-max))))
            (kill-buffer output-buffer)
            (string= buffer-contents "1"))))))

      (if (sole-emacs-process)
        (server-start))
#+end_src

Previous attempts to start an emacs server from the commandline
using ~emacs --daemon~ have been unsuccessful up to this point;
the command loads init files very differently for some reason.
It begins with the site-wide init files (under ~/etc~),
and when it finishes with that and tries loading init files in
~HOME/emacs.d~ it does not start with ~init.el~.

* Create convenience script for starting emacsclient

Create a script, ~ec~, that will call ~emacsclient~
and note that the command should create a new frame.

#+begin_src emacs-lisp
  (let* ((bin_dir "~/bin")
         (ec_script (concat bin_dir "/ec")))
      (make-directory bin_dir t)
      (if (not (file-exists-p ec_script))
          (progn
              (find-file "~/bin/ec")
              (insert "#!/bin/bash\nemacsclient -c")
              (save-buffer)
              (kill-buffer)
              (set-file-modes ec_script #o755))))
#+end_src

* Finish profiling

#+begin_src emacs-lisp
  ;(profiler-stop)
  ;(profiler-report)
#+end_src
